version: 2.1

jobs:
  build-app:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # run build
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      # run test
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make install
            make lint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  upload-dockerhub:
    docker:
      - image: circleci/python:3.9

    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.7

      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls

      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      # - run:
      #     name: Ensure EKS network exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/cloudformation/networks.yml \
      #         --tags project=${ENVIRONMENT_NAME}-project \
      #         --stack-name "${ENVIRONMENT_NAME}-eks-network" \
      #         --region ${AWS_DEFAULT_REGION} \
      #         --parameter-overrides file://.circleci/cloudformation/networks-parameters.json
      # - run:
      #     name: Ensure EKS Cluster exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/cloudformation/cluster.yml \
      #         --tags project=${ENVIRONMENT_NAME}-project \
      #         --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
      #         --region ${AWS_DEFAULT_REGION} \
      #         --parameter-overrides file://.circleci/cloudformation/cluster-parameters.json \
      #         --capabilities CAPABILITY_NAMED_IAM
      #     no_output_timeout: 15m
      # - run:
      #     name: Ensure Nodegroup exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/cloudformation/nodegroup.yml \
      #         --tags project=${ENVIRONMENT_NAME}-project \
      #         --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
      #         --region ${AWS_DEFAULT_REGION} \
      #         --parameter-overrides file://.circleci/cloudformation/nodegroup-parameters.json \
      #         --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/cloudformation/management.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://.circleci/cloudformation/management-parameters.json \
              --output text >> ~/checkIfDeployed.txt
            cat ~/checkIfDeployed.txt
          # command: |
          #   echo deploy ok > ~/checkIfDeployed.txt
      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [web] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - checkIfDeployed.txt

  configure-infrastructure:
    docker:
      - image: python:3.9.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "9d:75:ae:bb:11:19:1b:6c:b4:5d:f1:e2:9e:a2:d6:8e"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt install ansible -y
            which ansible
      - run:
          name: Configure server
          command: |
            cat ~/checkIfDeployed.txt
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd .circleci/ansible
                ansible-playbook -i ~/inventory.txt configure-server.yml
              fi

  configure-cluster:
    docker:
      - image: python:3.9.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "9d:75:ae:bb:11:19:1b:6c:b4:5d:f1:e2:9e:a2:d6:8e"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt install ansible -y
            which ansible
      - run:
          name: Configure cluster
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd .circleci/ansible
                ansible-playbook -i ~/inventory.txt configure-cluster.yml
              fi
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                echo "Wait 60 seconds..."
                sleep 60
              fi
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            cat ~/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt save-elb-dns.yml
            cat ~/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_dns.txt

  deploy-docker:
    docker:
      - image: python:3.9.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "9d:75:ae:bb:11:19:1b:6c:b4:5d:f1:e2:9e:a2:d6:8e"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt install ansible -y
            which ansible
      - run:
          name: Deploy newest Docker Image
          command: |
            cat ~/inventory.txt
            cd .circleci/ansible
            ansible-playbook -i ~/inventory.txt deploy-app.yml
          no_output_timeout: 2m

workflows:
  default:
    jobs:
      - build-app
      - upload-dockerhub:
          requires:
            - build-app
          filters:
            branches:
              only: [ main ]
      - deploy-infrastructure:
          filters:
            branches:
              only: [ main ]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - configure-cluster:
          requires:
            - upload-dockerhub
            - configure-infrastructure
      - deploy-docker:
          requires:
            - configure-cluster